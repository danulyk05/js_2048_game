{"version":3,"sources":["scripts/main.js"],"names":["field","scoreInfo","document","querySelector","table","button","messageLose","messageWin","messageStart","score","rows","columns","hasEmptyTitle","r","c","setRandomTwo","found","Math","floor","random","renderField","filterZero","row","filter","num","compareArr","prevField","fields","JSON","stringify","moved","newRow","i","length","push","movedLeft","parse","movedRight","reverse","movedUp","movedDown","cells","className","classList","add","textContent","checkWin","j","isGameOver","board","size","col","currentCell","checkUp","checkDown","checkLeft","checkRight","addEventListener","contains","remove","e","key"],"mappings":"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","file":"main.6c1c8d2b.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst scoreInfo = document.querySelector('.game-score');\nconst table = document.querySelector('.game-field');\nconst button = document.querySelector('.button');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\n\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\nlet field;\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n    messageStart.classList.add('hidden');\n  } else if (button.classList.contains('restart__active')) {\n    button.classList.remove('restart__active');\n    messageLose.classList.add('hidden');\n  } else {\n    messageWin.classList.add('hidden');\n  };\n\n  field = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n  scoreInfo.textContent = score;\n\n  setRandomTwo();\n  setRandomTwo();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowLeft':\n      movedLeft();\n      break;\n\n    case 'ArrowRight':\n      movedRight();\n      break;\n\n    case 'ArrowUp':\n      movedUp();\n      break;\n\n    case 'ArrowDown':\n      movedDown();\n      break;\n  }\n\n  if (isGameOver(field)) {\n    messageLose.classList.remove('hidden');\n    button.classList.add('restart__active');\n  }\n\n  if (checkWin()) {\n    messageWin.classList.remove('hidden');\n  }\n\n  scoreInfo.textContent = score;\n});\n\nfunction hasEmptyTitle() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (field[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nfunction setRandomTwo() {\n  if (!hasEmptyTitle()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (field[r][c] === 0) {\n      field[r][c] = 2;\n      renderField();\n\n      found = true;\n    }\n  }\n};\n\nfunction filterZero(row) {\n  return row.filter(num => num);\n};\n\nfunction compareArr(prevField, fields) {\n  return JSON.stringify(prevField) !== JSON.stringify(fields);\n};\n\nfunction moved(row) {\n  let newRow = row;\n\n  newRow = filterZero(newRow);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n    }\n  }\n\n  newRow = filterZero(newRow);\n\n  while (newRow.length < columns) {\n    newRow.push(0);\n  }\n\n  return newRow;\n};\n\nfunction movedLeft() {\n  const prevField = JSON.parse(JSON.stringify(field));\n\n  for (let r = 0; r < rows; r++) {\n    let row = field[r];\n\n    row = moved(row);\n    field[r] = row;\n  };\n\n  if (compareArr(prevField, field)) {\n    setRandomTwo();\n  }\n\n  renderField();\n};\n\nfunction movedRight() {\n  const prevField = JSON.parse(JSON.stringify(field));\n\n  for (let r = 0; r < rows; r++) {\n    let row = field[r];\n\n    row.reverse();\n\n    row = moved(row);\n\n    row.reverse();\n    field[r] = row;\n  };\n\n  if (compareArr(prevField, field)) {\n    setRandomTwo();\n  }\n\n  renderField();\n};\n\nfunction movedUp() {\n  const prevField = JSON.parse(JSON.stringify(field));\n\n  for (let c = 0; c < columns; c++) {\n    let row = [field[0][c], field[1][c], field[2][c], field[3][c]];\n\n    row = moved(row);\n\n    for (let r = 0; r < rows; r++) {\n      field[r][c] = row[r];\n    }\n  };\n\n  if (compareArr(prevField, field)) {\n    setRandomTwo();\n  }\n\n  renderField();\n};\n\nfunction movedDown() {\n  const prevField = JSON.parse(JSON.stringify(field));\n\n  for (let c = 0; c < columns; c++) {\n    let row = [field[0][c], field[1][c], field[2][c], field[3][c]];\n\n    row.reverse();\n    row = moved(row);\n    row.reverse();\n\n    for (let r = 0; r < rows; r++) {\n      field[r][c] = row[r];\n    }\n  };\n\n  if (compareArr(prevField, field)) {\n    setRandomTwo();\n  }\n\n  renderField();\n};\n\nfunction renderField() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      table.rows[r].cells[c].className = '';\n      table.rows[r].cells[c].classList.add('field-cell');\n      table.rows[r].cells[c].classList.add(`field-cell--${field[r][c]}`);\n      table.rows[r].cells[c].textContent = field[r][c] || '';\n    }\n  }\n};\n\nfunction checkWin() {\n  for (let i = 0; i < field[0].length; i++) {\n    for (let j = 0; j < field.length; j++) {\n      if (field[i][j] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction isGameOver(board) {\n  const size = board.length;\n\n  for (let row = 0; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      if (board[row][col] === 0) {\n        return false;\n      }\n    }\n  }\n\n  for (let row = 0; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      const currentCell = board[row][col];\n      const checkUp = row > 0 && board[row - 1][col] === currentCell;\n      const checkDown = row < size - 1 && board[row + 1][col] === currentCell;\n      const checkLeft = col > 0 && board[row][col - 1] === currentCell;\n      const checkRight = col < size - 1 && board[row][col + 1] === currentCell;\n\n      if (checkUp || checkDown || checkLeft || checkRight) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n"]}